name: Release Library

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: read

env:
  VERSION: ${{ github.ref_name }}

jobs:
  build:
    runs-on: ubuntu-latest             # NOTE: Linux only for now
    strategy:
      matrix:
        feature: [pi3, pi4, pi5]

    env:
      RUST_TARGET: aarch64-unknown-linux-gnu
      ARTIFACT_SUFFIX: linux
      LIB_EXT: a

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Toolchain
      - name: Install Rust Targets
        run: |
          rustup target add aarch64-unknown-none
          rustup target add ${{ env.RUST_TARGET }}
          rustup target add x86_64-unknown-linux-gnu

      - name: Setup Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: aarch64-unknown-none,${{ env.RUST_TARGET }},x86_64-unknown-linux-gnu
          components: rust-src,rustfmt,clippy

      # Build
      - name: Build Library
        run: |
          cargo build --release --features ${{ matrix.feature }} --target aarch64-unknown-none
          mkdir -p release-artifacts
          cp target/aarch64-unknown-none/release/librusta.a \
             release-artifacts/librusta-${{ matrix.feature }}-linux.a

      # TODO: Docs
      # - name: Generate Documentation
      #   run: |
      #     cargo doc --no-deps --features ${{ matrix.feature }} --target aarch64-unknown-none
      #     mkdir -p docs/${{ matrix.feature }}
      #     cp -r target/doc/. docs/${{ matrix.feature }}

      # FIXME: Lints / Verification
      # - name: Run Verification
      #   run: |
      #     cargo +nightly check --features ${{ matrix.feature }} \
      #         --target x86_64-unknown-linux-gnu \
      #         -Z build-std=core,compiler_builtins,alloc \
      #         -Z build-std-features=panic_immediate_abort
      #     cargo +nightly clippy --features ${{ matrix.feature }} \
      #         --target x86_64-unknown-linux-gnu \
      #         -Z build-std=core,compiler_builtins,alloc \
      #         -Z build-std-features=panic_immediate_abort

      # Upload build artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rusta-${{ matrix.feature }}-${{ env.ARTIFACT_SUFFIX }}
          path: |
            release-artifacts/*
            docs/${{ matrix.feature }}

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release Packages (Linux only)
        run: |
          mkdir -p dist
          for feature in pi3 pi4 pi5; do
            mkdir -p "dist/$feature-linux"
            ls -alh artifacts/rusta-$feature-linux/release-artifacts/
            cp -r "artifacts/rusta-$feature-linux/release-artifacts/librusta-$feature-linux.a" "dist/$feature-linux/"
            tar czvf "dist/rusta-$feature-linux-${{ env.VERSION }}.tar.gz" -C "dist/$feature-linux" .
          done

      - name: Publish Release
        uses: softprops/action-gh-release@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          files: dist/*.tar.gz
          generate_release_notes: true
